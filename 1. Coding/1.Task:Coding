{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c802bc60",
   "metadata": {},
   "source": [
    "### Task 1: Coding"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "bcdbc44d",
   "metadata": {},
   "source": [
    "Daikibo Industrials is a global leader in the manufacturing of heavy machinery, founded and headquartered in Tokyo, Japan. It is in the process of integrating IIoT (Industrial Internet-of-Things) devices to monitor, measure and analyze their manufacturing processes. Half of their infrastructure user devices streaming telemetry data are in one format, and the other half - in another. They need to combine the two data files. Both data files are in JSON format.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d765b648",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Impoer libraries\n",
    "import json, datetime, unittest,\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbd25a1c",
   "metadata": {},
   "source": [
    "#### Read JSON files with Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d948700a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We use the open() function to read the json files. Then, the files are parsed using json.load() method which \n",
    "# gives us Python dictionary objects named: jsonData1, jsonData2 and jsonexpectedResuly. \n",
    "with open(\"./data-1.json\",\"r\") as f:\n",
    "    jsonData1 = json.load(f)\n",
    "with open(\"./data-2.json\",\"r\") as f:\n",
    "    jsonData2 = json.load(f)\n",
    "with open(\"./data-result.json\",\"r\") as f:\n",
    "    jsonExpectedResult = json.load(f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0b457196",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'deviceID': 'dh28dslkja',\n",
       " 'deviceType': 'LaserCutter',\n",
       " 'timestamp': 1624445837783,\n",
       " 'location': {'country': 'japan',\n",
       "  'city': 'tokyo',\n",
       "  'area': 'keiyō-industrial-zone',\n",
       "  'factory': 'daikibo-factory-meiyo',\n",
       "  'section': 'section-1'},\n",
       " 'data': {'status': 'healthy', 'temperature': 22}}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jsonExpectedResult"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "241d2e8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'deviceID': 'dh28dslkja',\n",
       " 'deviceType': 'LaserCutter',\n",
       " 'timestamp': 1624445837783,\n",
       " 'location': 'japan/tokyo/keiyō-industrial-zone/daikibo-factory-meiyo/section-1',\n",
       " 'operationStatus': 'healthy',\n",
       " 'temp': 22}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jsonData1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "50f22954",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(jsonData1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f2406cad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_items([('deviceID', 'dh28dslkja'), ('deviceType', 'LaserCutter'), ('timestamp', 1624445837783), ('location', 'japan/tokyo/keiyō-industrial-zone/daikibo-factory-meiyo/section-1'), ('operationStatus', 'healthy'), ('temp', 22)])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jsonData1.items()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "efe94e3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['deviceID', 'deviceType', 'timestamp', 'location', 'operationStatus', 'temp'])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jsonData1.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c24e86ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_values(['dh28dslkja', 'LaserCutter', 1624445837783, 'japan/tokyo/keiyō-industrial-zone/daikibo-factory-meiyo/section-1', 'healthy', 22])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jsonData1.values()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c6ba279",
   "metadata": {},
   "source": [
    "### Accessing Elements of Nested Dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "45a339a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convertFromFormat1 (jsonObject):\n",
    "\n",
    "    # IMPLEMENT: Conversion From Type 1\n",
    "    locationParts = jsonObject['location'].split('/')\n",
    "\n",
    "    result = {\n",
    "        'deviceID': jsonObject['deviceID'],\n",
    "        'deviceType': jsonObject['deviceType'],\n",
    "        'timestamp': jsonObject['timestamp'],\n",
    "        'location': {\n",
    "            'country': locationParts[0],\n",
    "            'city': locationParts[1],\n",
    "            'area': locationParts[2],\n",
    "            'factory': locationParts[3],\n",
    "            'section': locationParts[4]\n",
    "        },\n",
    "        'data': {\n",
    "            'status': jsonObject['operationStatus'],\n",
    "            'temperature': jsonObject['temp']\n",
    "        }\n",
    "    }\n",
    "\n",
    "    return result\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7dfc3a72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'deviceID': 'dh28dslkja', 'deviceType': 'LaserCutter', 'timestamp': 1624445837783, 'location': {'country': 'japan', 'city': 'tokyo', 'area': 'keiyō-industrial-zone', 'factory': 'daikibo-factory-meiyo', 'section': 'section-1'}, 'data': {'status': 'healthy', 'temperature': 22}}\n"
     ]
    }
   ],
   "source": [
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "22bc76fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "locationParts = jsonData1['location'].split('/')\n",
    "\n",
    "result = {\n",
    "        'deviceID': jsonData1['deviceID'],\n",
    "        'deviceType': jsonData1['deviceType'],\n",
    "        'timestamp': jsonData1['timestamp'],\n",
    "        'location': {\n",
    "            'country': locationParts[0],\n",
    "            'city': locationParts[1],\n",
    "            'area': locationParts[2],\n",
    "            'factory': locationParts[3],\n",
    "            'section': locationParts[4]\n",
    "        },\n",
    "        'data': {\n",
    "            'status': jsonData1['operationStatus'],\n",
    "            'temperature': jsonData1['temp']\n",
    "        }\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dd9bef0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(locationParts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a9b79979",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'deviceID': 'dh28dslkja',\n",
       " 'deviceType': 'LaserCutter',\n",
       " 'timestamp': 1624445837783,\n",
       " 'location': {'country': 'japan',\n",
       "  'city': 'tokyo',\n",
       "  'area': 'keiyō-industrial-zone',\n",
       "  'factory': 'daikibo-factory-meiyo',\n",
       "  'section': 'section-1'},\n",
       " 'data': {'status': 'healthy', 'temperature': 22}}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7e51edd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'dict'>\n"
     ]
    }
   ],
   "source": [
    "print(type(result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "33319327",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'deviceID': 'dh28dslkja',\n",
       " 'deviceType': 'LaserCutter',\n",
       " 'timestamp': 1624445837783,\n",
       " 'location': {'country': 'japan',\n",
       "  'city': 'tokyo',\n",
       "  'area': 'keiyō-industrial-zone',\n",
       "  'factory': 'daikibo-factory-meiyo',\n",
       "  'section': 'section-1'},\n",
       " 'data': {'status': 'healthy', 'temperature': 22}}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "convertFromFormat1(jsonData1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9eab2bfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convertFromFormat2(jsonObject):\n",
    "\n",
    "    # IMPLEMENT: Conversion From Type 1\n",
    "    date = datetime.datetime.strptime(jsonObject['timestamp'],\n",
    "                                      '%Y-%m-%dT%H:%M:%S.%fZ')\n",
    "    timestamp = int(\n",
    "        (date - datetime.datetime(1970, 1, 1)).total_seconds() * 1000)\n",
    "\n",
    "    result = {\n",
    "        'deviceID': jsonObject['device']['id'],\n",
    "        'deviceType': jsonObject['device']['type'],\n",
    "        'timestamp': timestamp,\n",
    "        'location': {\n",
    "            'country': jsonObject['country'],\n",
    "            'city': jsonObject['city'],\n",
    "            'area': jsonObject['area'],\n",
    "            'factory': jsonObject['factory'],\n",
    "            'section': jsonObject['section']\n",
    "        },\n",
    "        'data': jsonObject['data']\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12db6f3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main(jsonObject):\n",
    "\n",
    "    result = {}\n",
    "\n",
    "    if (jsonObject.get('device') == None):\n",
    "        result = convertFromFormat1(jsonObject)\n",
    "    else:\n",
    "        result = convertFromFormat2(jsonObject)\n",
    "\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e64b953b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class TestSolution(unittest.TestCase):\n",
    "    def test_sanity(self):\n",
    "        result = json.loads(json.dumps(jsonExpectedResult))\n",
    "        self.assertEqual(result, jsonExpectedResult)\n",
    "\n",
    "    def test_dataType1(self):\n",
    "        result = main(jsonData1)\n",
    "        self.assertEqual(result, jsonExpectedResult,\n",
    "                         'Converting from Type 1 failed')\n",
    "\n",
    "    def test_dataType2(self):\n",
    "        result = main(jsonData2)\n",
    "        self.assertEqual(result, jsonExpectedResult,\n",
    "                         'Converting from Type 2 failed')\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34054d97",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json, unittest, datetime\n",
    "\n",
    "with open(\"./data-1.json\",\"r\") as f:\n",
    "    jsonData1 = json.load(f)\n",
    "with open(\"./data-2.json\",\"r\") as f:\n",
    "    jsonData2 = json.load(f)\n",
    "with open(\"./data-result.json\",\"r\") as f:\n",
    "    jsonExpectedResult = json.load(f)\n",
    "\n",
    "\n",
    "def convertFromFormat1 (jsonObject):\n",
    "\n",
    "    locationParts = jsonObject['location'].split('/')\n",
    "\n",
    "    result = {\n",
    "        'deviceID': jsonObject['deviceID'],\n",
    "        'deviceType': jsonObject['deviceType'],\n",
    "        'timestamp': jsonObject['timestamp'],\n",
    "        'location': {\n",
    "            'country': locationParts[0],\n",
    "            'city': locationParts[1],\n",
    "            'area': locationParts[2],\n",
    "            'factory': locationParts[3],\n",
    "            'section': locationParts[4]\n",
    "        },\n",
    "        'data': {\n",
    "            'status': jsonObject['operationStatus'],\n",
    "            'temperature': jsonObject['temp']\n",
    "        }\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "def convertFromFormat2 (jsonObject):\n",
    "\n",
    "    date = datetime.datetime.strptime(\n",
    "        jsonObject['timestamp'],\n",
    "        '%Y-%m-%dT%H:%M:%S.%fZ'\n",
    "    )\n",
    "    timestamp = round(\n",
    "        (date - datetime.datetime(1970, 1, 1)).total_seconds() * 1000\n",
    "    )\n",
    "\n",
    "    result = {\n",
    "        'deviceID': jsonObject['device']['id'],\n",
    "        'deviceType': jsonObject['device']['type'],\n",
    "        'timestamp': timestamp,\n",
    "        'location': {\n",
    "            'country': jsonObject['country'],\n",
    "            'city': jsonObject['city'],\n",
    "            'area': jsonObject['area'],\n",
    "            'factory': jsonObject['factory'],\n",
    "            'section': jsonObject['section']\n",
    "        },\n",
    "        'data': jsonObject['data']\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "\n",
    "def main (jsonObject):\n",
    "\n",
    "    result = {}\n",
    "\n",
    "    if (jsonObject.get('device') == None):\n",
    "        result = convertFromFormat1(jsonObject)\n",
    "    else:\n",
    "        result = convertFromFormat2(jsonObject)\n",
    "\n",
    "    return result\n",
    "\n",
    "\n",
    "class TestSolution(unittest.TestCase):\n",
    "\n",
    "    def test_sanity(self):\n",
    "\n",
    "        result = json.loads(json.dumps(jsonExpectedResult))\n",
    "        self.assertEqual(\n",
    "            result,\n",
    "            jsonExpectedResult\n",
    "        )\n",
    "\n",
    "    def test_dataType1(self):\n",
    "\n",
    "        result = main (jsonData1)\n",
    "        self.assertEqual(\n",
    "            result,\n",
    "            jsonExpectedResult,\n",
    "            'Converting from Type 1 failed'\n",
    "        )\n",
    "\n",
    "    def test_dataType2(self):\n",
    "\n",
    "        result = main (jsonData2)\n",
    "        self.assertEqual(\n",
    "            result,\n",
    "            jsonExpectedResult,\n",
    "            'Converting from Type 2 failed'\n",
    "        )\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1da4b9bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json, unittest, datetime\n",
    "\n",
    "with open(\"./data-1.json\",\"r\") as f:\n",
    "    jsonData1 = json.load(f)\n",
    "with open(\"./data-2.json\",\"r\") as f:\n",
    "    jsonData2 = json.load(f)\n",
    "with open(\"./data-result.json\",\"r\") as f:\n",
    "    jsonExpectedResult = json.load(f)\n",
    "\n",
    "\n",
    "def convertFromFormat1 (jsonObject):\n",
    "\n",
    "    locationParts = jsonObject['location'].split('/')\n",
    "\n",
    "    result = {\n",
    "        'deviceID': jsonObject['deviceID'],\n",
    "        'deviceType': jsonObject['deviceType'],\n",
    "        'timestamp': jsonObject['timestamp'],\n",
    "        'location': {\n",
    "            'country': locationParts[0],\n",
    "            'city': locationParts[1],\n",
    "            'area': locationParts[2],\n",
    "            'factory': locationParts[3],\n",
    "            'section': locationParts[4]\n",
    "        },\n",
    "        'data': {\n",
    "            'status': jsonObject['operationStatus'],\n",
    "            'temperature': jsonObject['temp']\n",
    "        }\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "def convertFromFormat2 (jsonObject):\n",
    "\n",
    "    date = datetime.datetime.strptime(\n",
    "        jsonObject['timestamp'],\n",
    "        '%Y-%m-%dT%H:%M:%S.%fZ'\n",
    "    )\n",
    "    timestamp = round(\n",
    "        (date - datetime.datetime(1970, 1, 1)).total_seconds() * 1000\n",
    "    )\n",
    "\n",
    "    result = {\n",
    "        'deviceID': jsonObject['device']['id'],\n",
    "        'deviceType': jsonObject['device']['type'],\n",
    "        'timestamp': timestamp,\n",
    "        'location': {\n",
    "            'country': jsonObject['country'],\n",
    "            'city': jsonObject['city'],\n",
    "            'area': jsonObject['area'],\n",
    "            'factory': jsonObject['factory'],\n",
    "            'section': jsonObject['section']\n",
    "        },\n",
    "        'data': jsonObject['data']\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "\n",
    "def main (jsonObject):\n",
    "\n",
    "    result = {}\n",
    "\n",
    "    if (jsonObject.get('device') == None):\n",
    "        result = convertFromFormat1(jsonObject)\n",
    "    else:\n",
    "        result = convertFromFormat2(jsonObject)\n",
    "\n",
    "    return result\n",
    "\n",
    "\n",
    "class TestSolution(unittest.TestCase):\n",
    "\n",
    "    def test_sanity(self):\n",
    "\n",
    "        result = json.loads(json.dumps(jsonExpectedResult))\n",
    "        self.assertEqual(\n",
    "            result,\n",
    "            jsonExpectedResult\n",
    "        )\n",
    "\n",
    "    def test_dataType1(self):\n",
    "\n",
    "        result = main (jsonData1)\n",
    "        self.assertEqual(\n",
    "            result,\n",
    "            jsonExpectedResult,\n",
    "            'Converting from Type 1 failed'\n",
    "        )\n",
    "\n",
    "    def test_dataType2(self):\n",
    "\n",
    "        result = main (jsonData2)\n",
    "        self.assertEqual(\n",
    "            result,\n",
    "            jsonExpectedResult,\n",
    "            'Converting from Type 2 failed'\n",
    "        )\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
